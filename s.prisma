
model Store {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String     // اسم المتجر
  description String?    // وصف المتجر
  type        String     // التصنيف الرئيسي (مثل: مأكولات ومشروبات)
  logo        String?    // شعار المتجر
  coverImage  String?    // صورة الغلاف
  images      String[]   // صور إضافية للمتجر
  address     String     // عنوان المتجر
  locations   StoreLocation[] // فروع المتجر
  phone       String?    // رقم الهاتف
  email       String?    // البريد الإلكتروني
  workingHours StoreWorkingHours[]
  categoryId   String?    @db.ObjectId
  category     Category?  @relation(fields: [categoryId], references: [id])
  rating      Float      @default(0.0)  // التقييم
  reviewsCount Int       @default(0)    // عدد التقييمات
  isActive    Boolean    @default(true) // حالة المتجر
  status      String     @default("active") // "active", "inactive", "closed"
  minOrderAmount Float?  // الحد الأدنى للطلب
  deliveryFee   Float?  // رسوم التوصيل
  
  categories  StoreCategory[] // تصنيفات المتجر الداخلية
  products    Product[]      // المنتجات
  offers      StoreOffer[]   // العروض
  orders      Order[]        // الطلبات
  
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  Coupon Coupon[]

  Discount Discount[]

  GiftCard GiftCard[]

  Reward Reward[]
}

model StoreLocation {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String     @db.ObjectId
  store       Store      @relation(fields: [storeId], references: [id])
  name        String     // اسم الفرع
  address     String     // عنوان الفرع
  latitude    Float      // خط العرض
  longitude   Float      // خط الطول
  phone       String?    // رقم الهاتف
  isActive    Boolean    @default(true)
  workingHours Json?     // ساعات العمل
  
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model StoreCategory {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String     @db.ObjectId
  store       Store      @relation(fields: [storeId], references: [id])
  name        String     // اسم التصنيف (مثل: برجر، فرايد تشيكن)
  description String?    // وصف التصنيف
  image       String?    // صورة التصنيف
  isActive    Boolean    @default(true)
  sortOrder   Int        @default(0)
  
  products    Product[]  // المنتجات في هذا التصنيف
  
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Product {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String     // اسم المنتج
  description String?    // وصف المنتج
  price       Float      // السعر الأساسي
  salePrice   Float?     // سعر العرض (إن وجد)
  images      String[]   // صور المنتج
  storeId     String     @db.ObjectId
  store       Store      @relation(fields: [storeId], references: [id])
  categoryId  String     @db.ObjectId
  category    StoreCategory @relation(fields: [categoryId], references: [id])
  isAvailable Boolean    @default(true)
  ingredients String[]   // المكونات
  extras      Json?      // إضافات اختيارية (مثل: حجم إضافي، إضافات خاصة)
  
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model StoreOffer {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String     @db.ObjectId
  store       Store      @relation(fields: [storeId], references: [id])
  name        String     // اسم العرض
  description String?    // وصف العرض
  type        String     // نوع العرض (مثل: عروض رمضان، عروض اللمة)
  image       String?    // صورة العرض
  startDate   DateTime?  // تاريخ بداية العرض
  endDate     DateTime?  // تاريخ نهاية العرض
  discount    Float?     // قيمة الخصم
  isActive    Boolean    @default(true)
  
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Discount {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String     @db.ObjectId
  store       Store      @relation(fields: [storeId], references: [id])
  name        String     // اسم الخصم
  description String?    // وصف الخصم
  type        DiscountType // نوع الخصم (نسبة مئوية أو مبلغ ثابت)
  value       Float      // قيمة الخصم
  startDate   DateTime   // تاريخ بداية الخصم
  endDate     DateTime   // تاريخ نهاية الخصم
  isActive    Boolean    @default(true)
  minOrderAmount Float?  // الحد الأدنى للطلب
  maxDiscountAmount Float? // الحد الأقصى للخصم
  applicableProducts String[] @db.ObjectId // المنتجات التي يطبق عليها الخصم
  applicableCategories String[] @db.ObjectId // التصنيفات التي يطبق عليها الخصم
  
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Coupon {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String     @db.ObjectId
  store       Store      @relation(fields: [storeId], references: [id])
  code        String     @unique // كود الكوبون
  name        String     // اسم الكوبون
  description String?    // وصف الكوبون
  type        DiscountType // نوع الخصم (نسبة مئوية أو مبلغ ثابت)
  value       Float      // قيمة الخصم
  startDate   DateTime   // تاريخ بداية الكوبون
  endDate     DateTime   // تاريخ نهاية الكوبون
  isActive    Boolean    @default(true)
  maxUses     Int?       // الحد الأقصى لاستخدام الكوبون
  usageCount  Int        @default(0) // عدد مرات الاستخدام
  minOrderAmount Float?  // الحد الأدنى للطلب
  maxDiscountAmount Float? // الحد الأقصى للخصم
  applicableProducts String[] @db.ObjectId // المنتجات التي يطبق عليها الكوبون
  applicableCategories String[] @db.ObjectId // التصنيفات التي يطبق عليها الكوبون
  
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

enum DiscountType {
  PERCENTAGE  // نسبة مئوية
  FIXED       // مبلغ ثابت
}

model GiftCard {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String   @db.ObjectId
  store       Store      @relation(fields: [storeId], references: [id])
  code        String   @unique
  amount      Float
  balance     Float
  isActive    Boolean  @default(true)
  expiryDate  DateTime?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Reward {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String   @db.ObjectId
  store       Store      @relation(fields: [storeId], references: [id])
  name        String
  description String?
  type        String   // "free_product", "discount", "gift_card"
  value       Float
  pointsCost  Int      // تكلفة النقاط للحصول على المكافأة
  isActive    Boolean  @default(true)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model UserLocation {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  userId      String     @db.ObjectId
  user        User       @relation(fields: [userId], references: [id])
  name        String     // اسم العنوان (المنزل، العمل، الخ)
  address     String     // العنوان التفصيلي
  apartment   String?    // رقم الشقة
  floor       String?    // رقم الطابق
  building    String?    // رقم المبنى
  street      String?    // اسم الشارع
  area        String?    // المنطقة
  city        String     // المدينة
  latitude    Float
  longitude   Float
  isDefault   Boolean    @default(false) // هل هو العنوان الافتراضي
  type        String     // "home", "work", "other"
  notes       String?    // ملاحظات إضافية
  
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model StoreWorkingHours {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String     @db.ObjectId
  store       Store      @relation(fields: [storeId], references: [id])
  dayOfWeek   Int        // 0 للأحد، 1 للاثنين، الخ
  isOpen      Boolean    @default(true)
  openTime    String     // مثال: "09:00"
  closeTime   String     // مثال: "22:00"
  breakStart  String?    // وقت بداية الاستراحة (اختياري)
  breakEnd    String?    // وقت نهاية الاستراحة (اختياري)
  isSpecialDay Boolean   @default(false) // هل هو يوم خاص (عطلة، مناسبة)
  specialDate DateTime?  // تاريخ اليوم الخاص
  note        String?    // ملاحظات إضافية

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

